package com.controller;

package com.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.core.Authentication;

import com.config.MyUserDetailsService;
import com.model.LoginRequest;
import com.service.JwtUtility;

@SpringBootTest
public class HomeControllerTest {

    @InjectMocks
    private HomeController homeController;

    @Mock
    private AuthenticationManager authenticationManager;

    @Mock
    private JwtUtility jwtUtility;

    @Mock
    private MyUserDetailsService myUserDetailsService;

    @Mock
    private Authentication authentication;

    private LoginRequest loginRequest;
/*
    @BeforeEach
    public void setUp() {
        loginRequest = new LoginRequest();
        loginRequest.setEmail("test@test.com");
        loginRequest.setPassword("test123");
    }*/

    @Test
    public void testLoginSuccess() throws Exception {
        // mock the authentication manager to return a valid authentication object
        when(authenticationManager.authenticate(authentication)).thenReturn(authentication);
        // mock the authentication object to return true for isAuthenticated method
        when(authentication.isAuthenticated()).thenReturn(true);
        // mock the jwt utility to return a dummy token
        when(jwtUtility.generateToken(loginRequest.getEmail())).thenReturn("dummy-token");

        // call the login method of the controller and assert the response
        ResponseEntity<?> response = homeController.login(loginRequest);
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals("dummy-token", response.getBody());
    }

    // you can write more test methods for other scenarios, such as invalid credentials, exceptions, etc.
}
