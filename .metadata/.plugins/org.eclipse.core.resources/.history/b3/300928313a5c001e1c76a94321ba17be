package com.casestudy.emailservice.controller;


import com.controller.MessageController;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.model.Ordermail;
import com.service.MessageService;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.RequestBuilder;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import static org.mockito.Mockito.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.*;

@WebMvcTest(MessageController.class)
@AutoConfigureMockMvc
public class MessageControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private MessageService messageService;

    private ObjectMapper objectMapper;

    @BeforeEach
    public void setUp() {
        objectMapper = new ObjectMapper();
    }

    @Test
    public void testGetUnreadMessages() throws Exception {
        // Mock data
        String userEmail = "user@example.com";
        Map<String, Object> message1 = new HashMap<>();
        message1.put("id", "1");
        message1.put("subject", "Test Message 1");
        message1.put("content", "This is the content of Test Message 1");
        message1.put("date", "2023-09-27");
        
        Map<String, Object> message2 = new HashMap<>();
        message2.put("id", "2");
        message2.put("subject", "Test Message 2");
        message2.put("content", "This is the content of Test Message 2");
        message2.put("date", "2023-09-28");

        Ordermail ordermail1 = new Ordermail(userEmail, message1, false, "High");
        Ordermail ordermail2 = new Ordermail(userEmail, message2, false, "Medium");
        ordermail1.setId("1");
        ordermail2.setId("2");
        
        // Mock the service behavior
        when(messageService.getUnreadMessagesByEmail(userEmail)).thenReturn(Arrays.asList(ordermail1, ordermail2));

        // Perform GET request
        RequestBuilder requestBuilder = MockMvcRequestBuilders
                .get("/email/messages")
                .header("User", userEmail);

        mockMvc.perform(requestBuilder)
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$[0].id").value("1"))
                .andExpect(jsonPath("$[0].email").value(userEmail))
                .andExpect(jsonPath("$[0].read").value(false))
                .andExpect(jsonPath("$[0].priority").value("High"))
                .andExpect(jsonPath("$[1].id").value("2"))
                .andExpect(jsonPath("$[1].email").value(userEmail))
                .andExpect(jsonPath("$[1].read").value(false))
                .andExpect(jsonPath("$[1].priority").value("Medium"))
                .andDo(print());
    }

    @Test
    public void testUpdateToRead() throws Exception {
        // Mock data
        String messageId = "1";

        // Perform PUT request
        RequestBuilder requestBuilder = MockMvcRequestBuilders
                .put("/email/updatetoread/{id}", messageId);

        mockMvc.perform(requestBuilder)
                .andExpect(status().isAccepted())
                .andExpect(content().string("Updated"))
                .andDo(print());

        // Verify that the service method was called with the correct argument
        verify(messageService, times(1)).updateToRead(messageId);
    }
}
